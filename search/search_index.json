{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview New Relic Dashboard Builder is a command line tool for declaratively configuring New Relic dashboards using YAML files. Design Goals New Relic Dashboard Builder was designed to help solve the problem of effectively managing a large and growing number of dashboards used to monitor a wide variety of services. It aims to fulfill two design goals that could not be met with using the New Relic UI to create and maintain dashboards: Allow New Relic dashboards to be managed in source control by defining them in simple, human-readable text files. Reduce duplication of query definitions to support easier maintenance of dashboards by Allowing the same query definition to be reused in multiple dashboards. Allowing portions of queries to be combined and reused across multiple queries. The design of New Relic Dashboard Builder was inspired by the Jenkins Job Builder tool. Installation The New Relic Dashboard Builder command line tool that can be installed from PyPI using pip pip install nrdash Usage To use New Relic Dashboard Builder, you must first acquire an admin New Relic API key . Once you have an admin API key, you can provide the admin API key and your dashboard configuration YAML file to the New Relic Dashboard Builder command line tool. nrdash --api-key <YOUR_ADMIN_API_KEY> --account-id <YOUR_ACCOUNT_ID> <DASHBOARD_DEFINITION_YAML_FILE> Note You must use an admin API key, not an account level API key to manage dashboards with New Relic Dashboard builder","title":"Overview"},{"location":"#overview","text":"New Relic Dashboard Builder is a command line tool for declaratively configuring New Relic dashboards using YAML files.","title":"Overview"},{"location":"#design-goals","text":"New Relic Dashboard Builder was designed to help solve the problem of effectively managing a large and growing number of dashboards used to monitor a wide variety of services. It aims to fulfill two design goals that could not be met with using the New Relic UI to create and maintain dashboards: Allow New Relic dashboards to be managed in source control by defining them in simple, human-readable text files. Reduce duplication of query definitions to support easier maintenance of dashboards by Allowing the same query definition to be reused in multiple dashboards. Allowing portions of queries to be combined and reused across multiple queries. The design of New Relic Dashboard Builder was inspired by the Jenkins Job Builder tool.","title":"Design Goals"},{"location":"#installation","text":"The New Relic Dashboard Builder command line tool that can be installed from PyPI using pip pip install nrdash","title":"Installation"},{"location":"#usage","text":"To use New Relic Dashboard Builder, you must first acquire an admin New Relic API key . Once you have an admin API key, you can provide the admin API key and your dashboard configuration YAML file to the New Relic Dashboard Builder command line tool. nrdash --api-key <YOUR_ADMIN_API_KEY> --account-id <YOUR_ACCOUNT_ID> <DASHBOARD_DEFINITION_YAML_FILE> Note You must use an admin API key, not an account level API key to manage dashboards with New Relic Dashboard builder","title":"Usage"},{"location":"guide/","text":"Guide This guide provides a walkthrough for getting started with using New Relic Dashboard builder to define and manage your New Relic dashboards. Basic Query and Dashboard Definitions New Relic dashboards are composed of one or more widgets. Each widget has a size and location on the dashboard as well as an NRQL query that defines the data that is displayed by the widget. Suppose we wanted to create a dashboard consisting the following widget: This dashboard could be defined in YAML as dashboards : sample-dashboard : title : Sample Dashboard widgets : - widget : query : title : Transactions by Response Status nrql : SELECT COUNT(*) FROM Transaction WHERE transactionType = 'Web' FACET response.status visualization : facet_bar_chart row : 1 column : 1 width : 3 height : 2 If we wanted to add another widget to this dashboard, we could simply extend the definition to include a second widget dashboards : sample-dashboard : title : Sample Dashboard widgets : - widget : query : title : Transactions by Response Status nrql : SELECT COUNT(*) FROM Transaction WHERE transactionType = 'Web' FACET response.status visualization : facet_bar_chart row : 1 column : 1 width : 3 height : 2 - widget : query : title : Transaction Errors nrql : SELECT COUNT(*) FROM TransactionError WHERE transactionType = 'Web' COMPARE WITH 1 week ago visualization : billboard_comparison row : 3 column : 1 width : 1 height : 1 Note New Relic Dashboard Builder identifies dashboards by their title. Running the tool will overwrite the configuration for any existing dashboards that have a title that matches any dashboards defined in the YAML file. If no dashboard exists with a title, then a new dashboard will be created. Sharing Queries Across Multiple Dashboards If you have a query that you would like to display on multiple dashboards, then you can define the query in a queries section and refer to that query definition from all dashboards. Queries can be specified once in a queries section and re-used across many dashboards to avoid duplicating the query definition. queries : transactions-by-response-status-query : title : Transactions by Response Status nrql : SELECT COUNT(*) FROM Transaction WHERE transactionType = 'Web' FACET response.status visualization : facet_bar_chart dashboards : sample-dashboard-1 : title : Sample Dashboard 1 widgets : - widget : query : transactions-by-response-status-query row : 1 column : 1 width : 3 height : 2 sample-dashboard-2 : title : Sample Dashboard 2 widgets : - widget : query : transactions-by-response-status-query row : 1 column : 1 width : 1 height : 1 Sharing Query Components Oftentimes components of queries are duplicated across multiple queries and multiple dashboards. This can make maintaining dashboards through the New Relic API cumbersome because of all the duplication. New Relic Dashboard builder allows you to define query components once, combining and reusing the components to create queries with minimal duplication. New Relic Dashboard Builder supports three types of query components that can be used to form complete NRQL queries. Conditions - Specify the conditions used in the WHERE clauses of NRQL queries (e.g. WHERE response.status = 200 ) Output Selections - Specify the fields and aggregations selected from NRQL queries (e.g. SELECT COUNT(*) or SELECT response.status ) Displays - Specify how the data from NRQL queries are displayed by specifying any SINCE , UNTIL , WITH TIMEZONE , COMPARE WITH , or TIMESERIES clauses Conditions Conditions are specified in a conditions section of the YAML definition file using raw NRQL snippets. conditions : service-a-rabbit-queues-condition : displayName IN ('/service-a-queue-1', '/service-a-queue-2') service-b-rabbit-queues-condition : displayName IN ('/service-b-queue-1', '/service-b-queue-2') Conditions can also be combined using the and and or combinators to create other conditions conditions : service-b-production-rabbit-queues-condition : and : - condition : service-b-rabbit-queues-condition - label.env = 'production service-a-production-rabbit-queues-condition : and : - condition : service-a-rabbit-queues-condition - label.env = 'production' all-rabbit-queues-condition : or : - condition : service-a-production-rabbit-queues-condition - condition : service-b-production-rabbit-queues-condition Output Selections Output selections are specified in the output-selections section of the YAML definition file. Output selections consist of raw NRQL snippets. output-selections : total-consumers-output : max(queue.consumers) total-message-publish-rate-output : max(queue.messagesPublishedPerSecond) Displays Displays are specified in the displays section of the YAML definition file. Displays consist of an optional raw NRQL snippet and a visualization type. displays : timeseries-by-name-display : nrql : TIMESERIES FACET displayName visualization : faceted_line_chart current-value-by-name-display : nrql : FACET displayName visualization : facet_table Combining Components into Queries Altogether, conditions, output selections, and displays can be combined to create queries which can be used in dashboards. conditions : service-a-rabbit-queues-condition : displayName IN ('/service-a-queue-1', '/service-a-queue-2') service-a-production-rabbit-queues-condition : and : - condition : service-a-rabbit-queues-condition - label.env = 'production' service-b-rabbit-queues-condition : displayName IN ('/service-b-queue-1', '/service-b-queue-2') service-b-production-rabbit-queues-condition : and : - condition : service-b-rabbit-queues-condition - label.env = 'production' all-rabbit-queues-condition : or : - condition : service-a-production-rabbit-queues-condition - condition : service-b-production-rabbit-queues-condition output-selections : total-consumers-output : max(queue.consumers) total-message-publish-rate-output : max(queue.messagesPublishedPerSecond) displays : timeseries-by-name-display : nrql : TIMESERIES FACET displayName visualization : faceted_line_chart current-value-by-name-display : nrql : FACET displayName visualization : facet_table queries : rabbit-queue-consumers-query : title : RabbitMQ Queue Consumers event : RabbitmqQueueSample condition : all-rabbit-queues-condition output : total-consumers-output display : current-value-by-name-display rabbit-queue-publish-rate-query : title : RabbitMQ Message Publish Rate event : RabbitmqQueueSample condition : all-rabbit-queues-condition output : total-message-publish-rate-output display : timeseries-by-name-display service-a-rabbit-queue-consumers-query : title : RabbitMQ Queue Consumers event : RabbitmqQueueSample condition : service-a-production-rabbit-queues-condition output : total-consumers-output display : current-value-by-name-display service-a-rabbit-queue-publish-rate-query : title : RabbitMQ Message Publish Rate event : RabbitmqQueueSample condition : service-a-production-rabbit-queues-condition output : total-message-publish-rate-output display : timeseries-by-name-display dashboards : all-services-rabbit-mq-dashboard : title : Sample Dashboard widgets : - widget : query : rabbit-queue-publish-rate-query row : 1 column : 1 width : 3 height : 1 - widget : query : rabbit-queue-consumers-query row : 2 column : 1 width : 1 height : 1 service-a-rabbit-mq-dashboard : title : Sample Dashboard 2 widgets : - widget : query : service-a-rabbit-queue-publish-rate-query row : 1 column : 1 width : 3 height : 1 - widget : query : service-a-rabbit-queue-consumers-query row : 2 column : 1 width : 1 height : 1","title":"Guide"},{"location":"guide/#guide","text":"This guide provides a walkthrough for getting started with using New Relic Dashboard builder to define and manage your New Relic dashboards.","title":"Guide"},{"location":"guide/#basic-query-and-dashboard-definitions","text":"New Relic dashboards are composed of one or more widgets. Each widget has a size and location on the dashboard as well as an NRQL query that defines the data that is displayed by the widget. Suppose we wanted to create a dashboard consisting the following widget: This dashboard could be defined in YAML as dashboards : sample-dashboard : title : Sample Dashboard widgets : - widget : query : title : Transactions by Response Status nrql : SELECT COUNT(*) FROM Transaction WHERE transactionType = 'Web' FACET response.status visualization : facet_bar_chart row : 1 column : 1 width : 3 height : 2 If we wanted to add another widget to this dashboard, we could simply extend the definition to include a second widget dashboards : sample-dashboard : title : Sample Dashboard widgets : - widget : query : title : Transactions by Response Status nrql : SELECT COUNT(*) FROM Transaction WHERE transactionType = 'Web' FACET response.status visualization : facet_bar_chart row : 1 column : 1 width : 3 height : 2 - widget : query : title : Transaction Errors nrql : SELECT COUNT(*) FROM TransactionError WHERE transactionType = 'Web' COMPARE WITH 1 week ago visualization : billboard_comparison row : 3 column : 1 width : 1 height : 1 Note New Relic Dashboard Builder identifies dashboards by their title. Running the tool will overwrite the configuration for any existing dashboards that have a title that matches any dashboards defined in the YAML file. If no dashboard exists with a title, then a new dashboard will be created.","title":"Basic Query and Dashboard Definitions"},{"location":"guide/#sharing-queries-across-multiple-dashboards","text":"If you have a query that you would like to display on multiple dashboards, then you can define the query in a queries section and refer to that query definition from all dashboards. Queries can be specified once in a queries section and re-used across many dashboards to avoid duplicating the query definition. queries : transactions-by-response-status-query : title : Transactions by Response Status nrql : SELECT COUNT(*) FROM Transaction WHERE transactionType = 'Web' FACET response.status visualization : facet_bar_chart dashboards : sample-dashboard-1 : title : Sample Dashboard 1 widgets : - widget : query : transactions-by-response-status-query row : 1 column : 1 width : 3 height : 2 sample-dashboard-2 : title : Sample Dashboard 2 widgets : - widget : query : transactions-by-response-status-query row : 1 column : 1 width : 1 height : 1","title":"Sharing Queries Across Multiple Dashboards"},{"location":"guide/#sharing-query-components","text":"Oftentimes components of queries are duplicated across multiple queries and multiple dashboards. This can make maintaining dashboards through the New Relic API cumbersome because of all the duplication. New Relic Dashboard builder allows you to define query components once, combining and reusing the components to create queries with minimal duplication. New Relic Dashboard Builder supports three types of query components that can be used to form complete NRQL queries. Conditions - Specify the conditions used in the WHERE clauses of NRQL queries (e.g. WHERE response.status = 200 ) Output Selections - Specify the fields and aggregations selected from NRQL queries (e.g. SELECT COUNT(*) or SELECT response.status ) Displays - Specify how the data from NRQL queries are displayed by specifying any SINCE , UNTIL , WITH TIMEZONE , COMPARE WITH , or TIMESERIES clauses","title":"Sharing Query Components"},{"location":"guide/#conditions","text":"Conditions are specified in a conditions section of the YAML definition file using raw NRQL snippets. conditions : service-a-rabbit-queues-condition : displayName IN ('/service-a-queue-1', '/service-a-queue-2') service-b-rabbit-queues-condition : displayName IN ('/service-b-queue-1', '/service-b-queue-2') Conditions can also be combined using the and and or combinators to create other conditions conditions : service-b-production-rabbit-queues-condition : and : - condition : service-b-rabbit-queues-condition - label.env = 'production service-a-production-rabbit-queues-condition : and : - condition : service-a-rabbit-queues-condition - label.env = 'production' all-rabbit-queues-condition : or : - condition : service-a-production-rabbit-queues-condition - condition : service-b-production-rabbit-queues-condition","title":"Conditions"},{"location":"guide/#output-selections","text":"Output selections are specified in the output-selections section of the YAML definition file. Output selections consist of raw NRQL snippets. output-selections : total-consumers-output : max(queue.consumers) total-message-publish-rate-output : max(queue.messagesPublishedPerSecond)","title":"Output Selections"},{"location":"guide/#displays","text":"Displays are specified in the displays section of the YAML definition file. Displays consist of an optional raw NRQL snippet and a visualization type. displays : timeseries-by-name-display : nrql : TIMESERIES FACET displayName visualization : faceted_line_chart current-value-by-name-display : nrql : FACET displayName visualization : facet_table","title":"Displays"},{"location":"guide/#combining-components-into-queries","text":"Altogether, conditions, output selections, and displays can be combined to create queries which can be used in dashboards. conditions : service-a-rabbit-queues-condition : displayName IN ('/service-a-queue-1', '/service-a-queue-2') service-a-production-rabbit-queues-condition : and : - condition : service-a-rabbit-queues-condition - label.env = 'production' service-b-rabbit-queues-condition : displayName IN ('/service-b-queue-1', '/service-b-queue-2') service-b-production-rabbit-queues-condition : and : - condition : service-b-rabbit-queues-condition - label.env = 'production' all-rabbit-queues-condition : or : - condition : service-a-production-rabbit-queues-condition - condition : service-b-production-rabbit-queues-condition output-selections : total-consumers-output : max(queue.consumers) total-message-publish-rate-output : max(queue.messagesPublishedPerSecond) displays : timeseries-by-name-display : nrql : TIMESERIES FACET displayName visualization : faceted_line_chart current-value-by-name-display : nrql : FACET displayName visualization : facet_table queries : rabbit-queue-consumers-query : title : RabbitMQ Queue Consumers event : RabbitmqQueueSample condition : all-rabbit-queues-condition output : total-consumers-output display : current-value-by-name-display rabbit-queue-publish-rate-query : title : RabbitMQ Message Publish Rate event : RabbitmqQueueSample condition : all-rabbit-queues-condition output : total-message-publish-rate-output display : timeseries-by-name-display service-a-rabbit-queue-consumers-query : title : RabbitMQ Queue Consumers event : RabbitmqQueueSample condition : service-a-production-rabbit-queues-condition output : total-consumers-output display : current-value-by-name-display service-a-rabbit-queue-publish-rate-query : title : RabbitMQ Message Publish Rate event : RabbitmqQueueSample condition : service-a-production-rabbit-queues-condition output : total-message-publish-rate-output display : timeseries-by-name-display dashboards : all-services-rabbit-mq-dashboard : title : Sample Dashboard widgets : - widget : query : rabbit-queue-publish-rate-query row : 1 column : 1 width : 3 height : 1 - widget : query : rabbit-queue-consumers-query row : 2 column : 1 width : 1 height : 1 service-a-rabbit-mq-dashboard : title : Sample Dashboard 2 widgets : - widget : query : service-a-rabbit-queue-publish-rate-query row : 1 column : 1 width : 3 height : 1 - widget : query : service-a-rabbit-queue-consumers-query row : 2 column : 1 width : 1 height : 1","title":"Combining Components into Queries"},{"location":"reference/","text":"Reference","title":"Reference"},{"location":"reference/#reference","text":"","title":"Reference"}]}