{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview New Relic Dashboard Builder is a command line tool for declaratively configuring New Relic dashboards using YAML files. Design Goals New Relic Dashboard Builder was designed to help solve the problem of effectively managing a large and growing number of dashboards used to monitor a wide variety of services. It aims to fulfill two design goals that could not be met with using the New Relic UI to create and maintain dashboards: Allow New Relic dashboards to be managed in source control by defining them in simple, human-readable text files. Reduce duplication of query definitions to support easier maintenance of dashboards by Allowing the same query definition to be reused in multiple dashboards. Allowing portions of queries to be combined and reused across multiple queries. The design of New Relic Dashboard Builder was inspired by the Jenkins Job Builder tool. Installation The New Relic Dashboard Builder command line tool that can be installed from PyPI using pip pip install nrdash Note New Relic Dashboard Builder only works with Python 3.6 or higher. Usage To use New Relic Dashboard Builder, you must first acquire an admin New Relic API key . Once you have an admin API key, you can configure your New Relic dashboards using the definitions in the YAML definition file by running the nrdash command line tool. nrdash --api-key <YOUR_ADMIN_API_KEY> --account-id <YOUR_ACCOUNT_ID> <DASHBOARD_DEFINITION_YAML_FILE>","title":"Overview"},{"location":"#overview","text":"New Relic Dashboard Builder is a command line tool for declaratively configuring New Relic dashboards using YAML files.","title":"Overview"},{"location":"#design-goals","text":"New Relic Dashboard Builder was designed to help solve the problem of effectively managing a large and growing number of dashboards used to monitor a wide variety of services. It aims to fulfill two design goals that could not be met with using the New Relic UI to create and maintain dashboards: Allow New Relic dashboards to be managed in source control by defining them in simple, human-readable text files. Reduce duplication of query definitions to support easier maintenance of dashboards by Allowing the same query definition to be reused in multiple dashboards. Allowing portions of queries to be combined and reused across multiple queries. The design of New Relic Dashboard Builder was inspired by the Jenkins Job Builder tool.","title":"Design Goals"},{"location":"#installation","text":"The New Relic Dashboard Builder command line tool that can be installed from PyPI using pip pip install nrdash Note New Relic Dashboard Builder only works with Python 3.6 or higher.","title":"Installation"},{"location":"#usage","text":"To use New Relic Dashboard Builder, you must first acquire an admin New Relic API key . Once you have an admin API key, you can configure your New Relic dashboards using the definitions in the YAML definition file by running the nrdash command line tool. nrdash --api-key <YOUR_ADMIN_API_KEY> --account-id <YOUR_ACCOUNT_ID> <DASHBOARD_DEFINITION_YAML_FILE>","title":"Usage"},{"location":"guide/","text":"Guide This guide provides a walkthrough for getting started with using New Relic Dashboard builder to define and manage your New Relic dashboards. Basic Query and Dashboard Definitions New Relic dashboards are composed of one or more widgets. Each widget has a size and location on the dashboard as well as an NRQL query that defines the data that is displayed by the widget. Suppose we wanted to create a dashboard consisting of the following widget: This dashboard could be defined in YAML as dashboards : sample-dashboard : title : Sample Dashboard widgets : - widget : query : title : Transactions by Response Status nrql : SELECT COUNT(*) FROM Transaction WHERE transactionType = 'Web' FACET response.status visualization : facet_bar_chart row : 1 column : 1 width : 3 height : 2 If we wanted to add another widget to this dashboard, we could simply extend the definition to include a second widget dashboards : sample-dashboard : title : Sample Dashboard widgets : - widget : query : title : Transactions by Response Status nrql : SELECT COUNT(*) FROM Transaction WHERE transactionType = 'Web' FACET response.status visualization : facet_bar_chart row : 1 column : 1 width : 3 height : 2 - widget : query : title : Transaction Errors nrql : SELECT COUNT(*) FROM TransactionError WHERE transactionType = 'Web' COMPARE WITH 1 week ago visualization : billboard_comparison row : 3 column : 1 width : 1 height : 1 Note New Relic Dashboard Builder identifies dashboards by their title. Running the tool will overwrite the configuration for any existing dashboards that have a title that matches any dashboards defined in the YAML file. If no dashboard exists with a title, then a new dashboard will be created. Sharing Queries Across Multiple Dashboards If you have a query that you would like to display on multiple dashboards, then you can define the query in a queries section and refer to that query definition from all dashboards. Queries can be specified once in a queries section and re-used across many dashboards to avoid duplicating the query definition. queries : transactions-by-response-status-query : title : Transactions by Response Status nrql : SELECT COUNT(*) FROM Transaction WHERE transactionType = 'Web' FACET response.status visualization : facet_bar_chart dashboards : sample-dashboard-1 : title : Sample Dashboard 1 widgets : - widget : query : transactions-by-response-status-query row : 1 column : 1 width : 3 height : 2 sample-dashboard-2 : title : Sample Dashboard 2 widgets : - widget : query : transactions-by-response-status-query row : 1 column : 1 width : 1 height : 1 Sharing Query Components Oftentimes components of queries are duplicated across multiple queries and multiple dashboards. This can make maintaining dashboards through the New Relic API cumbersome because of all the duplication. New Relic Dashboard builder allows you to define query components once, combining and reusing the components to create queries with minimal duplication. New Relic Dashboard Builder supports three types of query components that can be used to form complete NRQL queries. Conditions - Specify the conditions used in the WHERE clauses of NRQL queries (e.g. WHERE response.status = 200 ) Output Selections - Specify the fields and aggregations selected from NRQL queries in the SELECT clause (e.g. SELECT COUNT(*) or SELECT response.status ) Displays - Specify how the data from NRQL queries are displayed by specifying any SINCE , UNTIL , WITH TIMEZONE , COMPARE WITH , or TIMESERIES clauses Conditions Conditions are specified in a conditions section of the YAML definition file using raw NRQL snippets. conditions : service-a-rabbit-queues-condition : displayName IN ('/service-a-queue-1', '/service-a-queue-2') service-b-rabbit-queues-condition : displayName IN ('/service-b-queue-1', '/service-b-queue-2') Conditions can also be combined using the and and or combinators to create other conditions conditions : service-b-production-rabbit-queues-condition : and : - condition : service-b-rabbit-queues-condition - label.env = 'production service-a-production-rabbit-queues-condition : and : - condition : service-a-rabbit-queues-condition - label.env = 'production' all-rabbit-queues-condition : or : - condition : service-a-production-rabbit-queues-condition - condition : service-b-production-rabbit-queues-condition Output Selections Output selections are specified in the output-selections section of the YAML definition file. Output selections consist of raw NRQL snippets. output-selections : total-consumers-output : max(queue.consumers) total-message-publish-rate-output : max(queue.messagesPublishedPerSecond) Displays Displays are specified in the displays section of the YAML definition file. Displays consist of an optional raw NRQL snippet and a visualization type. displays : timeseries-by-name-display : nrql : TIMESERIES FACET displayName visualization : faceted_line_chart current-value-by-name-display : nrql : FACET displayName visualization : facet_table Combining Components into Queries Altogether, conditions, output selections, and displays can be combined to create queries which can be used in dashboards. conditions : service-a-rabbit-queues-condition : displayName IN ('/service-a-queue-1', '/service-a-queue-2') service-a-production-rabbit-queues-condition : and : - condition : service-a-rabbit-queues-condition - label.env = 'production' service-b-rabbit-queues-condition : displayName IN ('/service-b-queue-1', '/service-b-queue-2') service-b-production-rabbit-queues-condition : and : - condition : service-b-rabbit-queues-condition - label.env = 'production' all-rabbit-queues-condition : or : - condition : service-a-production-rabbit-queues-condition - condition : service-b-production-rabbit-queues-condition output-selections : total-consumers-output : max(queue.consumers) total-message-publish-rate-output : max(queue.messagesPublishedPerSecond) displays : timeseries-by-name-display : nrql : TIMESERIES FACET displayName visualization : faceted_line_chart current-value-by-name-display : nrql : FACET displayName visualization : facet_table queries : rabbit-queue-consumers-query : title : RabbitMQ Queue Consumers event : RabbitmqQueueSample condition : all-rabbit-queues-condition output : total-consumers-output display : current-value-by-name-display rabbit-queue-publish-rate-query : title : RabbitMQ Message Publish Rate event : RabbitmqQueueSample condition : all-rabbit-queues-condition output : total-message-publish-rate-output display : timeseries-by-name-display service-a-rabbit-queue-consumers-query : title : RabbitMQ Queue Consumers event : RabbitmqQueueSample condition : service-a-production-rabbit-queues-condition output : total-consumers-output display : current-value-by-name-display service-a-rabbit-queue-publish-rate-query : title : RabbitMQ Message Publish Rate event : RabbitmqQueueSample condition : service-a-production-rabbit-queues-condition output : total-message-publish-rate-output display : timeseries-by-name-display dashboards : all-services-rabbit-mq-dashboard : title : Sample Dashboard widgets : - widget : query : rabbit-queue-publish-rate-query row : 1 column : 1 width : 3 height : 1 - widget : query : rabbit-queue-consumers-query row : 2 column : 1 width : 1 height : 1 service-a-rabbit-mq-dashboard : title : Sample Dashboard 2 widgets : - widget : query : service-a-rabbit-queue-publish-rate-query row : 1 column : 1 width : 3 height : 1 - widget : query : service-a-rabbit-queue-consumers-query row : 2 column : 1 width : 1 height : 1","title":"Guide"},{"location":"guide/#guide","text":"This guide provides a walkthrough for getting started with using New Relic Dashboard builder to define and manage your New Relic dashboards.","title":"Guide"},{"location":"guide/#basic-query-and-dashboard-definitions","text":"New Relic dashboards are composed of one or more widgets. Each widget has a size and location on the dashboard as well as an NRQL query that defines the data that is displayed by the widget. Suppose we wanted to create a dashboard consisting of the following widget: This dashboard could be defined in YAML as dashboards : sample-dashboard : title : Sample Dashboard widgets : - widget : query : title : Transactions by Response Status nrql : SELECT COUNT(*) FROM Transaction WHERE transactionType = 'Web' FACET response.status visualization : facet_bar_chart row : 1 column : 1 width : 3 height : 2 If we wanted to add another widget to this dashboard, we could simply extend the definition to include a second widget dashboards : sample-dashboard : title : Sample Dashboard widgets : - widget : query : title : Transactions by Response Status nrql : SELECT COUNT(*) FROM Transaction WHERE transactionType = 'Web' FACET response.status visualization : facet_bar_chart row : 1 column : 1 width : 3 height : 2 - widget : query : title : Transaction Errors nrql : SELECT COUNT(*) FROM TransactionError WHERE transactionType = 'Web' COMPARE WITH 1 week ago visualization : billboard_comparison row : 3 column : 1 width : 1 height : 1 Note New Relic Dashboard Builder identifies dashboards by their title. Running the tool will overwrite the configuration for any existing dashboards that have a title that matches any dashboards defined in the YAML file. If no dashboard exists with a title, then a new dashboard will be created.","title":"Basic Query and Dashboard Definitions"},{"location":"guide/#sharing-queries-across-multiple-dashboards","text":"If you have a query that you would like to display on multiple dashboards, then you can define the query in a queries section and refer to that query definition from all dashboards. Queries can be specified once in a queries section and re-used across many dashboards to avoid duplicating the query definition. queries : transactions-by-response-status-query : title : Transactions by Response Status nrql : SELECT COUNT(*) FROM Transaction WHERE transactionType = 'Web' FACET response.status visualization : facet_bar_chart dashboards : sample-dashboard-1 : title : Sample Dashboard 1 widgets : - widget : query : transactions-by-response-status-query row : 1 column : 1 width : 3 height : 2 sample-dashboard-2 : title : Sample Dashboard 2 widgets : - widget : query : transactions-by-response-status-query row : 1 column : 1 width : 1 height : 1","title":"Sharing Queries Across Multiple Dashboards"},{"location":"guide/#sharing-query-components","text":"Oftentimes components of queries are duplicated across multiple queries and multiple dashboards. This can make maintaining dashboards through the New Relic API cumbersome because of all the duplication. New Relic Dashboard builder allows you to define query components once, combining and reusing the components to create queries with minimal duplication. New Relic Dashboard Builder supports three types of query components that can be used to form complete NRQL queries. Conditions - Specify the conditions used in the WHERE clauses of NRQL queries (e.g. WHERE response.status = 200 ) Output Selections - Specify the fields and aggregations selected from NRQL queries in the SELECT clause (e.g. SELECT COUNT(*) or SELECT response.status ) Displays - Specify how the data from NRQL queries are displayed by specifying any SINCE , UNTIL , WITH TIMEZONE , COMPARE WITH , or TIMESERIES clauses","title":"Sharing Query Components"},{"location":"guide/#conditions","text":"Conditions are specified in a conditions section of the YAML definition file using raw NRQL snippets. conditions : service-a-rabbit-queues-condition : displayName IN ('/service-a-queue-1', '/service-a-queue-2') service-b-rabbit-queues-condition : displayName IN ('/service-b-queue-1', '/service-b-queue-2') Conditions can also be combined using the and and or combinators to create other conditions conditions : service-b-production-rabbit-queues-condition : and : - condition : service-b-rabbit-queues-condition - label.env = 'production service-a-production-rabbit-queues-condition : and : - condition : service-a-rabbit-queues-condition - label.env = 'production' all-rabbit-queues-condition : or : - condition : service-a-production-rabbit-queues-condition - condition : service-b-production-rabbit-queues-condition","title":"Conditions"},{"location":"guide/#output-selections","text":"Output selections are specified in the output-selections section of the YAML definition file. Output selections consist of raw NRQL snippets. output-selections : total-consumers-output : max(queue.consumers) total-message-publish-rate-output : max(queue.messagesPublishedPerSecond)","title":"Output Selections"},{"location":"guide/#displays","text":"Displays are specified in the displays section of the YAML definition file. Displays consist of an optional raw NRQL snippet and a visualization type. displays : timeseries-by-name-display : nrql : TIMESERIES FACET displayName visualization : faceted_line_chart current-value-by-name-display : nrql : FACET displayName visualization : facet_table","title":"Displays"},{"location":"guide/#combining-components-into-queries","text":"Altogether, conditions, output selections, and displays can be combined to create queries which can be used in dashboards. conditions : service-a-rabbit-queues-condition : displayName IN ('/service-a-queue-1', '/service-a-queue-2') service-a-production-rabbit-queues-condition : and : - condition : service-a-rabbit-queues-condition - label.env = 'production' service-b-rabbit-queues-condition : displayName IN ('/service-b-queue-1', '/service-b-queue-2') service-b-production-rabbit-queues-condition : and : - condition : service-b-rabbit-queues-condition - label.env = 'production' all-rabbit-queues-condition : or : - condition : service-a-production-rabbit-queues-condition - condition : service-b-production-rabbit-queues-condition output-selections : total-consumers-output : max(queue.consumers) total-message-publish-rate-output : max(queue.messagesPublishedPerSecond) displays : timeseries-by-name-display : nrql : TIMESERIES FACET displayName visualization : faceted_line_chart current-value-by-name-display : nrql : FACET displayName visualization : facet_table queries : rabbit-queue-consumers-query : title : RabbitMQ Queue Consumers event : RabbitmqQueueSample condition : all-rabbit-queues-condition output : total-consumers-output display : current-value-by-name-display rabbit-queue-publish-rate-query : title : RabbitMQ Message Publish Rate event : RabbitmqQueueSample condition : all-rabbit-queues-condition output : total-message-publish-rate-output display : timeseries-by-name-display service-a-rabbit-queue-consumers-query : title : RabbitMQ Queue Consumers event : RabbitmqQueueSample condition : service-a-production-rabbit-queues-condition output : total-consumers-output display : current-value-by-name-display service-a-rabbit-queue-publish-rate-query : title : RabbitMQ Message Publish Rate event : RabbitmqQueueSample condition : service-a-production-rabbit-queues-condition output : total-message-publish-rate-output display : timeseries-by-name-display dashboards : all-services-rabbit-mq-dashboard : title : Sample Dashboard widgets : - widget : query : rabbit-queue-publish-rate-query row : 1 column : 1 width : 3 height : 1 - widget : query : rabbit-queue-consumers-query row : 2 column : 1 width : 1 height : 1 service-a-rabbit-mq-dashboard : title : Sample Dashboard 2 widgets : - widget : query : service-a-rabbit-queue-publish-rate-query row : 1 column : 1 width : 3 height : 1 - widget : query : service-a-rabbit-queue-consumers-query row : 2 column : 1 width : 1 height : 1","title":"Combining Components into Queries"},{"location":"reference/","text":"Reference Command Line Arguments To configure New Relic dashboards based on a YAML definition file, the New Relic Dashboard Builder tool must be invoked from the command line with all required arguments. Usage: nrdash [ OPTIONS ] CONFIG_FILE Build New Relic dashboards based on YAML configuration. Options: --api-key TEXT New Relic admin API key [ required ] --account-id INTEGER New Relic account id [ required ] --help Show this message and exit. Note New Relic Dashboard Builder must use an admin API key, not an account level API key Dashboards Dashboards definitions are specified under the dashboards section. The dashboard title is used to uniquely identify each dashboard in an account. Any existing dashboards on the account with the same title will be overwritten with the definition in the configuration file. A new dashboard will be created if no dashboards exist with the title. YAML Snippet Dashboards can be defined with both inline queries and references to queries defined in the queries section dashboards : sample-dashboard : title : Sample Dashboard widgets : - widget : query : title : Transactions by Response Status nrql : SELECT COUNT(*) FROM Transaction WHERE transactionType = 'Web' FACET response.status visualization : facet_bar_chart row : 1 column : 1 width : 3 height : 2 - widget : query : sample-query row : 3 column : 1 width : 1 height : 1 Arguments Dashboards are defined with the following set of arguments Argument Description Required? title Title of the dashboard. The title is used to uniquely identify the dashboard and therefore should be unique. Required widgets List of widgets that are included in the dashboard. Required Widgets in a dashboard are defined with the following set of arguments Argument Description Required? query The query that specifies the data displayed by the widget. The query can be either an inline query or a reference to a query defined in the queries section. Required row The row of the dashboard on which the widget should be displayed. Rows are numbered starting from 1. Required column The column of the dashboard on which the widget should be displayed. Valid column values are 1, 2, or 3. Required width The width of the widget. Valid width values are 1, 2, or 3. Required height The height of the widget. Required Queries Queries are specified in the queries section and define complete NRQL queries that are used to display data in widgets on a dashboard. YAML Snippet Queries can be defined as either inline queries or componentized queries . Componentized queries allow query components to be shared between multiple queries to avoid duplication in query definitions. queries : my-inline-query : title : Web Transactions by Response Status nrql : SELECT COUNT(*) FROM Transaction WHERE transactionType = 'Web' FACET response.status visualization : facet_bar_chart notes : Notes about my inline query # Optional my-componentized-query : title : My Query event : MyEvent condition : prod-events # Optional output : total-count display : facet-with-timeseries notes : Notes about my query # Optional Arguments Inline queries are defined with the following arguments Argument Description Required? title The title of the query displayed as the title on the widget in the dashboard. Required nrql The complete NRQL query string. Required visualization A widget visualization enum value . Required notes Notes for the query displayed as the notes on the widget in the dashboard. Optional Componentized queries are defined with the following arguments Argument Description Required? title The title of the query displayed as the title on the widget in the dashboard. Required event The New Relic insights event used in the query. Required condition The name of the condition used in the query. Optional output The name of the output selection used in the query. Required display The name of the display configuration used in the query. Required notes Notes for the query displayed as the notes on the widget in the dashboard. Optional Displays Displays are specified under the displays section and specify the widget visualization type as well as how a query should be displayed using any SINCE , UNTIL , WITH TIMEZONE , COMPARE WITH , or TIMESERIES clauses for the query. YAML Snippet displays : visualization-only-display : visualization : billboard display-with-clauses : visualization : billboard_comparison nrql : FACET appName COMPARE WITH 1 WEEK AGO # Optional Arguments Argument Description Required? visualization A widget visualization enum value . Required nrql An NRQL snippet containing only SINCE , UNTIL , WITH TIMEZONE , COMPARE WITH , or TIMESERIES clauses. Optional Widget Visualization Values The follow widget visualization values are supported as specified in the New Relic API documentation Widget Visualization Values event_table line_chart facet_table facet_bar_chart facet_pie_chart billboard faceted_area_chart faceted_line_chart comparison_line_chart heatmap histogram billboard_comparison attribute_sheet funnel gauge json list Output Selections Output selections are specified under the output-selections section and define the fields and aggregations selected from an NRQL query in the SELECT clause. YAML Snippet There are three different types of output selections: Raw NRQL snippets, aggregation functions, and multiple outputs. Raw NRQL Snippets Raw NRQL snippets are clauses such as SELECT LATEST(timestamp) can be defined as output-selections : raw-nrql-output : LATEST(timestamp) raw-nrql-output-with-label : LATEST(timestamp) AS `Latest Event` Aggregation Functions Aggregation functions, which include PERCENTAGE and FILTER functions, are clauses such as SELECT FILTER ( LATEST ( timestamp ), WHERE status = 'success' ) SELECT PERCENTAGE ( COUNT ( * ), WHERE status != 'success' ) AS ErrorRate These types of output selection can specify their WHERE clauses either inline or by referencing a condition defined in the conditions section. They are defined as output-selections : inline-condition-output : percentage : function : COUNT(*) condition : status != 'Success' label : ErrorRate # Optional referenced-condition-output : filter : function : LATEST(timestamp) condition : successful-events Multiple Output Selections Finally, queries can include multiple output selections, such as SELECT FILTER ( LATEST ( TIMESTAMP ), WHERE status = 'success' ) AS LatestSuccess , SELECT FILTER ( LATEST ( TIMESTAMP ), WHERE status != 'success' ) LastFailure Multiple output selections can be specified by using a list of output selections. output-selections : multiple-output : - percentage : function : COUNT(*) condition : status != 'Success' - LATEST(timestamp) AS `Latest Event` - filter : function : LATEST(timestamp) condition : status = 'Success' label : Latest Success # Optional Arguments percentage and filter output selections are specified with the following arguments Argument Description Required? function The aggregation function used, e.g. COUNT(*) or LATEST(timestamp) Required condition The condition used in the WHERE clause of the function. May either be defined inline as an NRQL snippet or referenced a defined condition . Required Label The AS clause for the output. The label will automatically be surrounded by backticks (`), so labels may contain spaces. Optional Conditions Conditions are specified in the conditions section and define the WHERE clauses used for NRQL queries. YAML Snippet Conditions can either be base conditions consisting of only NRQL snippets or extending conditions that extend other conditions using the and and or condition combinators. The and and or condition combinators can combine any number of conditions but must always reference at least one other defined condition. conditions : # A base condition service-a-rabbit-queues-condition : displayName IN ('/service-a-queue-1', '/service-a-queue-2') service-b-rabbit-queues-condition : displayName IN ('/service-b-queue-1', '/service-b-queue-2') # Using the `and` combinator service-a-production-rabbit-queues-condition : and : - condition : service-a-rabbit-queues-condition # Reference a previously defined condition - label.env = 'production' # Combine with a raw NRQL snippet service-b-production-rabbit-queues-condition : and : - condition : service-b-rabbit-queues-condition - label.env = 'production' - label.role = 'rabbitmq' # Using the `or` combinator all-rabbit-queues-condition : or : - condition : service-a-production-rabbit-queues-condition - condition : service-b-production-rabbit-queues-condition","title":"Reference"},{"location":"reference/#reference","text":"","title":"Reference"},{"location":"reference/#command-line-arguments","text":"To configure New Relic dashboards based on a YAML definition file, the New Relic Dashboard Builder tool must be invoked from the command line with all required arguments. Usage: nrdash [ OPTIONS ] CONFIG_FILE Build New Relic dashboards based on YAML configuration. Options: --api-key TEXT New Relic admin API key [ required ] --account-id INTEGER New Relic account id [ required ] --help Show this message and exit. Note New Relic Dashboard Builder must use an admin API key, not an account level API key","title":"Command Line Arguments"},{"location":"reference/#dashboards","text":"Dashboards definitions are specified under the dashboards section. The dashboard title is used to uniquely identify each dashboard in an account. Any existing dashboards on the account with the same title will be overwritten with the definition in the configuration file. A new dashboard will be created if no dashboards exist with the title.","title":"Dashboards"},{"location":"reference/#yaml-snippet","text":"Dashboards can be defined with both inline queries and references to queries defined in the queries section dashboards : sample-dashboard : title : Sample Dashboard widgets : - widget : query : title : Transactions by Response Status nrql : SELECT COUNT(*) FROM Transaction WHERE transactionType = 'Web' FACET response.status visualization : facet_bar_chart row : 1 column : 1 width : 3 height : 2 - widget : query : sample-query row : 3 column : 1 width : 1 height : 1","title":"YAML Snippet"},{"location":"reference/#arguments","text":"Dashboards are defined with the following set of arguments Argument Description Required? title Title of the dashboard. The title is used to uniquely identify the dashboard and therefore should be unique. Required widgets List of widgets that are included in the dashboard. Required Widgets in a dashboard are defined with the following set of arguments Argument Description Required? query The query that specifies the data displayed by the widget. The query can be either an inline query or a reference to a query defined in the queries section. Required row The row of the dashboard on which the widget should be displayed. Rows are numbered starting from 1. Required column The column of the dashboard on which the widget should be displayed. Valid column values are 1, 2, or 3. Required width The width of the widget. Valid width values are 1, 2, or 3. Required height The height of the widget. Required","title":"Arguments"},{"location":"reference/#queries","text":"Queries are specified in the queries section and define complete NRQL queries that are used to display data in widgets on a dashboard.","title":"Queries"},{"location":"reference/#yaml-snippet_1","text":"Queries can be defined as either inline queries or componentized queries . Componentized queries allow query components to be shared between multiple queries to avoid duplication in query definitions. queries : my-inline-query : title : Web Transactions by Response Status nrql : SELECT COUNT(*) FROM Transaction WHERE transactionType = 'Web' FACET response.status visualization : facet_bar_chart notes : Notes about my inline query # Optional my-componentized-query : title : My Query event : MyEvent condition : prod-events # Optional output : total-count display : facet-with-timeseries notes : Notes about my query # Optional","title":"YAML Snippet"},{"location":"reference/#arguments_1","text":"Inline queries are defined with the following arguments Argument Description Required? title The title of the query displayed as the title on the widget in the dashboard. Required nrql The complete NRQL query string. Required visualization A widget visualization enum value . Required notes Notes for the query displayed as the notes on the widget in the dashboard. Optional Componentized queries are defined with the following arguments Argument Description Required? title The title of the query displayed as the title on the widget in the dashboard. Required event The New Relic insights event used in the query. Required condition The name of the condition used in the query. Optional output The name of the output selection used in the query. Required display The name of the display configuration used in the query. Required notes Notes for the query displayed as the notes on the widget in the dashboard. Optional","title":"Arguments"},{"location":"reference/#displays","text":"Displays are specified under the displays section and specify the widget visualization type as well as how a query should be displayed using any SINCE , UNTIL , WITH TIMEZONE , COMPARE WITH , or TIMESERIES clauses for the query.","title":"Displays"},{"location":"reference/#yaml-snippet_2","text":"displays : visualization-only-display : visualization : billboard display-with-clauses : visualization : billboard_comparison nrql : FACET appName COMPARE WITH 1 WEEK AGO # Optional","title":"YAML Snippet"},{"location":"reference/#arguments_2","text":"Argument Description Required? visualization A widget visualization enum value . Required nrql An NRQL snippet containing only SINCE , UNTIL , WITH TIMEZONE , COMPARE WITH , or TIMESERIES clauses. Optional","title":"Arguments"},{"location":"reference/#widget-visualization-values","text":"The follow widget visualization values are supported as specified in the New Relic API documentation Widget Visualization Values event_table line_chart facet_table facet_bar_chart facet_pie_chart billboard faceted_area_chart faceted_line_chart comparison_line_chart heatmap histogram billboard_comparison attribute_sheet funnel gauge json list","title":"Widget Visualization Values"},{"location":"reference/#output-selections","text":"Output selections are specified under the output-selections section and define the fields and aggregations selected from an NRQL query in the SELECT clause.","title":"Output Selections"},{"location":"reference/#yaml-snippet_3","text":"There are three different types of output selections: Raw NRQL snippets, aggregation functions, and multiple outputs.","title":"YAML Snippet"},{"location":"reference/#raw-nrql-snippets","text":"Raw NRQL snippets are clauses such as SELECT LATEST(timestamp) can be defined as output-selections : raw-nrql-output : LATEST(timestamp) raw-nrql-output-with-label : LATEST(timestamp) AS `Latest Event`","title":"Raw NRQL Snippets"},{"location":"reference/#aggregation-functions","text":"Aggregation functions, which include PERCENTAGE and FILTER functions, are clauses such as SELECT FILTER ( LATEST ( timestamp ), WHERE status = 'success' ) SELECT PERCENTAGE ( COUNT ( * ), WHERE status != 'success' ) AS ErrorRate These types of output selection can specify their WHERE clauses either inline or by referencing a condition defined in the conditions section. They are defined as output-selections : inline-condition-output : percentage : function : COUNT(*) condition : status != 'Success' label : ErrorRate # Optional referenced-condition-output : filter : function : LATEST(timestamp) condition : successful-events","title":"Aggregation Functions"},{"location":"reference/#multiple-output-selections","text":"Finally, queries can include multiple output selections, such as SELECT FILTER ( LATEST ( TIMESTAMP ), WHERE status = 'success' ) AS LatestSuccess , SELECT FILTER ( LATEST ( TIMESTAMP ), WHERE status != 'success' ) LastFailure Multiple output selections can be specified by using a list of output selections. output-selections : multiple-output : - percentage : function : COUNT(*) condition : status != 'Success' - LATEST(timestamp) AS `Latest Event` - filter : function : LATEST(timestamp) condition : status = 'Success' label : Latest Success # Optional","title":"Multiple Output Selections"},{"location":"reference/#arguments_3","text":"percentage and filter output selections are specified with the following arguments Argument Description Required? function The aggregation function used, e.g. COUNT(*) or LATEST(timestamp) Required condition The condition used in the WHERE clause of the function. May either be defined inline as an NRQL snippet or referenced a defined condition . Required Label The AS clause for the output. The label will automatically be surrounded by backticks (`), so labels may contain spaces. Optional","title":"Arguments"},{"location":"reference/#conditions","text":"Conditions are specified in the conditions section and define the WHERE clauses used for NRQL queries.","title":"Conditions"},{"location":"reference/#yaml-snippet_4","text":"Conditions can either be base conditions consisting of only NRQL snippets or extending conditions that extend other conditions using the and and or condition combinators. The and and or condition combinators can combine any number of conditions but must always reference at least one other defined condition. conditions : # A base condition service-a-rabbit-queues-condition : displayName IN ('/service-a-queue-1', '/service-a-queue-2') service-b-rabbit-queues-condition : displayName IN ('/service-b-queue-1', '/service-b-queue-2') # Using the `and` combinator service-a-production-rabbit-queues-condition : and : - condition : service-a-rabbit-queues-condition # Reference a previously defined condition - label.env = 'production' # Combine with a raw NRQL snippet service-b-production-rabbit-queues-condition : and : - condition : service-b-rabbit-queues-condition - label.env = 'production' - label.role = 'rabbitmq' # Using the `or` combinator all-rabbit-queues-condition : or : - condition : service-a-production-rabbit-queues-condition - condition : service-b-production-rabbit-queues-condition","title":"YAML Snippet"}]}